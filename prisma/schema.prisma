generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Example {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// stores allowed values for user roles
model Role {
  id    String @id
  users User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  eventId               String?
  role                  Role           @relation(fields: [roleId], references: [id])
  title                 String?
  twitter               String?
  github                String?
  linkedin              String?
  website               String?
  createdAt             DateTime       @default(now())
  accounts              Account[]
  sessions              Session[]
  events                Event?         @relation(fields: [eventId], references: [id])
  autherOfSuperProjects SuperProject[]
  authorOfProject       Project[]
  likes                 Like[]
  Comment               Comment[]
  techs                 Tech[]
  memberOfProjects      Project[]      @relation("ProjectMembers")
  memberOfEvents        Event[]        @relation("EventMembers")
  roleId                String

  @@index([eventId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String    @id @default(cuid())
  name        String
  date        DateTime
  location    String
  description String
  startTime   String
  image       String?
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  projects    Project[]
  members     User[]    @relation("EventMembers")
}

model SuperProject {
  id          String    @id @default(cuid())
  name        String
  description String
  link        String?
  image       String?
  authorId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  techs       Tech[]
  author      User?     @relation(fields: [authorId], references: [id])
  projects    Project[]

  @@index([authorId])
}

model Project {
  id             String       @id @default(cuid())
  eventId        String
  superProjectId String
  authorId       String?
  createdAt      DateTime     @default(now())
  description    String
  link           String?
  name           String
  updatedAt      DateTime     @updatedAt
  superProject   SuperProject @relation(fields: [superProjectId], references: [id])
  event          Event        @relation(fields: [eventId], references: [id])
  members        User[]       @relation("ProjectMembers")
  likes          Like[]
  comments       Comment[]
  techs          Tech[]
  author         User?        @relation(fields: [authorId], references: [id])

  @@index([eventId])
}

model Tech {
  id             String        @id @default(cuid())
  masterTechId   String
  userId         String?
  superProjectId String?
  projectId      String?
  tech           MasterTech    @relation(fields: [masterTechId], references: [id])
  superProject   SuperProject? @relation(fields: [superProjectId], references: [id])
  project        Project?      @relation(fields: [projectId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])

  @@index([masterTechId])
  @@index([superProjectId])
  @@index([userId])
}

model MasterTech {
  id     String @id @default(cuid())
  slug   String
  label  String
  imgUrl String
  Tech   Tech[]
}

model Like {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model EventMembers {
  A String
  B String

  @@unique([A, B], map: "_EventMembers_AB_unique")
  @@index([B], map: "_EventMembers_B_index")
  @@map("_EventMembers")
}

model ProjectMembers {
  A String
  B String

  @@unique([A, B], map: "_ProjectMembers_AB_unique")
  @@index([B], map: "_ProjectMembers_B_index")
  @@map("_ProjectMembers")
}
